/*
 * This build file was auto generated by running the Gradle 'init' task
*
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.0/userguide/tutorial_java_projects.html
 */
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'idea'

group = 'org.wai'
version = '1.0.0'
description = "Example Jersey REST Server"
sourceCompatibility = 1.8
targetCompatibility = 1.8

def jerseyVersion = '2.13'
def springVersion = "4.1.1.RELEASE"
def slf4jVersion = '1.7.5'
def logbackVersion = '1.0.6'
def spockVersion = '0.7-groovy-2.0'



sourceSets {
  integrationTest {
    java.srcDir file('src/integration-test/java')
    resources.srcDir file('src/integration-tes/resources')
  }
}

[jettyRun, jettyRunWar,jettyStop]*.stopPort = 8090
[jettyRun, jettyRunWar,jettyStop]*.stopKey = 'stopKey'
task integrationTest(type: Test) {
  dependsOn test

  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath

  //Need to start up Jetty before running the REST-assured tests
  doFirst {
    jettyRun.daemon = true
    jettyRun.execute()
  }
  doLast {
    jettyStop.execute()
  }
}

check.dependsOn integrationTest


repositories {
  // Use 'maven central' for resolving your dependencies.
  // You can declare any Maven/Ivy/file repository here.
  mavenCentral()
}

dependencies {

  //Spring dependencies
  compile "org.springframework:spring-core:${springVersion}"
  compile "org.springframework:spring-web:${springVersion}"
  compile "org.springframework:spring-context:${springVersion}"

  //Jersey dependencies
  compile "org.glassfish.jersey.containers:jersey-container-servlet:${jerseyVersion}" // for servlet container with Servlet API older than 3.0, use "jersey-container-servlet-core"Â  jar instead
  compile("org.glassfish.jersey.ext:jersey-spring3:${jerseyVersion}") {
    exclude group: 'org.springframework'
  }
  compile "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}"      //JSON support for Jersey
  compile "org.glassfish.jersey.core:jersey-client:${jerseyVersion}"


  // The production code uses the SLF4J logging API at compile time
  compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
  compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: slf4jVersion
  compile group: 'org.slf4j', name: 'jul-to-slf4j', version: slf4jVersion
  compile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
  compile group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion
  compile group: 'ch.qos.logback', name: 'logback-access', version: logbackVersion

  //utilities libraires
  compile group: 'com.google.guava', name: 'guava', version: '12.0'

  //testing dependencies
  testCompile "junit:junit:4.11"
  testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: "2.0.5"

  testCompile "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-jetty:${jerseyVersion}"
  testCompile "org.springframework:spring-test:${springVersion}"
  testCompile group: 'org.spockframework', name: 'spock-core', version: spockVersion
  testCompile group: 'org.spockframework', name: 'spock-spring', version: spockVersion
  testCompile (group: 'com.jayway.restassured', name: 'rest-assured', version: '1.2.3') {
    exclude group: 'org.codehaus.groovy'
  }
/*  testCompile (group: 'co.freeside', name: 'betamax', version: '1.1.2'){
    exclude group: 'org.codehaus.groovy'
  }*/

  integrationTestCompile sourceSets.main.output
  integrationTestCompile configurations.testCompile
  integrationTestCompile sourceSets.test.output
  integrationTestRuntime configurations.testRuntime

}

tasks.idea.dependsOn(cleanIdea)

idea {
  module {
    downloadSources = true
    testSourceDirs += file('src/integration-test/java')
  }
}




